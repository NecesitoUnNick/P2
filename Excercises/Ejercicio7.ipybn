{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![texto alternativo](https://drive.google.com/uc?id=1CXVh-Dy6T792nWexE0kH45AOqqFj2_wG)\n",
    "\n",
    "\n",
    "<center> <h1>Maestría en Analytics</h1> </center>\n",
    "<center> <h1>Modelos Avanzados para el Análisis de Datos 1</h1> </center>\n",
    "<center> <h1>Exercise 7 - Car Price Prediction </h1> </center>\n",
    "\n",
    "**Grupo 3**\n",
    "- Carlos Francisco Silva Ortiz\n",
    "- Sergio Alberto Mora Pardo \n",
    "- Nidia Marcela Ortiz Sandoval\n",
    "- Germán Guillermo Torres\n",
    "\n",
    "29 June 2020"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7\n",
    "\n",
    "# Part 1 - DT\n",
    "\n",
    "## Capital Bikeshare data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "- Capital Bikeshare dataset from Kaggle: [data](https://github.com/justmarkham/DAT8/blob/master/data/bikeshare.csv), [data dictionary](https://www.kaggle.com/c/bike-sharing-demand/data)\n",
    "- Each observation represents the bikeshare rentals initiated during a given hour of a given day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.tree import DecisionTreeRegressor, export_graphviz\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read the data and set \"datetime\" as the index\n",
    "bikes = pd.read_csv('../datasets/bikeshare.csv', index_col='datetime', parse_dates=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "metadata": {},
   "outputs": [],
   "source": [
    "# \"count\" is a method, so it's best to rename that column\n",
    "bikes.rename(columns={'count':'total'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create \"hour\" as its own feature\n",
    "bikes['hour'] = bikes.index.hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>total</th>\n",
       "      <th>hour</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-01 00:00:00</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>81</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-01 01:00:00</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8</td>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-01 02:00:00</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-01 03:00:00</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-01 04:00:00</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     season  holiday  workingday  weather  temp   atemp  \\\n",
       "datetime                                                                  \n",
       "2011-01-01 00:00:00       1        0           0        1  9.84  14.395   \n",
       "2011-01-01 01:00:00       1        0           0        1  9.02  13.635   \n",
       "2011-01-01 02:00:00       1        0           0        1  9.02  13.635   \n",
       "2011-01-01 03:00:00       1        0           0        1  9.84  14.395   \n",
       "2011-01-01 04:00:00       1        0           0        1  9.84  14.395   \n",
       "\n",
       "                     humidity  windspeed  casual  registered  total  hour  \n",
       "datetime                                                                   \n",
       "2011-01-01 00:00:00        81        0.0       3          13     16     0  \n",
       "2011-01-01 01:00:00        80        0.0       8          32     40     1  \n",
       "2011-01-01 02:00:00        80        0.0       5          27     32     2  \n",
       "2011-01-01 03:00:00        75        0.0       3          10     13     3  \n",
       "2011-01-01 04:00:00        75        0.0       0           1      1     4  "
      ]
     },
     "execution_count": 332,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>total</th>\n",
       "      <th>hour</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2012-12-19 19:00:00</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>15.58</td>\n",
       "      <td>19.695</td>\n",
       "      <td>50</td>\n",
       "      <td>26.0027</td>\n",
       "      <td>7</td>\n",
       "      <td>329</td>\n",
       "      <td>336</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-12-19 20:00:00</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14.76</td>\n",
       "      <td>17.425</td>\n",
       "      <td>57</td>\n",
       "      <td>15.0013</td>\n",
       "      <td>10</td>\n",
       "      <td>231</td>\n",
       "      <td>241</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-12-19 21:00:00</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13.94</td>\n",
       "      <td>15.910</td>\n",
       "      <td>61</td>\n",
       "      <td>15.0013</td>\n",
       "      <td>4</td>\n",
       "      <td>164</td>\n",
       "      <td>168</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-12-19 22:00:00</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13.94</td>\n",
       "      <td>17.425</td>\n",
       "      <td>61</td>\n",
       "      <td>6.0032</td>\n",
       "      <td>12</td>\n",
       "      <td>117</td>\n",
       "      <td>129</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-12-19 23:00:00</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13.12</td>\n",
       "      <td>16.665</td>\n",
       "      <td>66</td>\n",
       "      <td>8.9981</td>\n",
       "      <td>4</td>\n",
       "      <td>84</td>\n",
       "      <td>88</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     season  holiday  workingday  weather   temp   atemp  \\\n",
       "datetime                                                                   \n",
       "2012-12-19 19:00:00       4        0           1        1  15.58  19.695   \n",
       "2012-12-19 20:00:00       4        0           1        1  14.76  17.425   \n",
       "2012-12-19 21:00:00       4        0           1        1  13.94  15.910   \n",
       "2012-12-19 22:00:00       4        0           1        1  13.94  17.425   \n",
       "2012-12-19 23:00:00       4        0           1        1  13.12  16.665   \n",
       "\n",
       "                     humidity  windspeed  casual  registered  total  hour  \n",
       "datetime                                                                   \n",
       "2012-12-19 19:00:00        50    26.0027       7         329    336    19  \n",
       "2012-12-19 20:00:00        57    15.0013      10         231    241    20  \n",
       "2012-12-19 21:00:00        61    15.0013       4         164    168    21  \n",
       "2012-12-19 22:00:00        61     6.0032      12         117    129    22  \n",
       "2012-12-19 23:00:00        66     8.9981       4          84     88    23  "
      ]
     },
     "execution_count": 333,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **hour** ranges from 0 (midnight) through 23 (11pm)\n",
    "- **workingday** is either 0 (weekend or holiday) or 1 (non-holiday weekday)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7.1\n",
    "\n",
    "Run these two `groupby` statements and figure out what they tell you about the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "workingday\n",
       "0    188.506621\n",
       "1    193.011873\n",
       "Name: total, dtype: float64"
      ]
     },
     "execution_count": 334,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# mean rentals for each value of \"workingday\"\n",
    "bikes.groupby('workingday').total.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La cantidad de bicicletas promedio por día laboral y no laboral es similar, encontrando que es levemente superior la cantidad para el caso de días laborales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hour\n",
       "0      55.138462\n",
       "1      33.859031\n",
       "2      22.899554\n",
       "3      11.757506\n",
       "4       6.407240\n",
       "5      19.767699\n",
       "6      76.259341\n",
       "7     213.116484\n",
       "8     362.769231\n",
       "9     221.780220\n",
       "10    175.092308\n",
       "11    210.674725\n",
       "12    256.508772\n",
       "13    257.787281\n",
       "14    243.442982\n",
       "15    254.298246\n",
       "16    316.372807\n",
       "17    468.765351\n",
       "18    430.859649\n",
       "19    315.278509\n",
       "20    228.517544\n",
       "21    173.370614\n",
       "22    133.576754\n",
       "23     89.508772\n",
       "Name: total, dtype: float64"
      ]
     },
     "execution_count": 335,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.groupby('hour').total.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ab139fdac8>"
      ]
     },
     "execution_count": 336,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# mean rentals for each value of \"hour\"\n",
    "bikes.groupby('hour').total.mean().plot(figsize=(15,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se identifican en general dos picos a largo del día, alrededor de las 8:00AM y las 5:00PM, lo cual podría obedecer a que en horas, la población utiliza la bicicleta para desplazasrse a trabajar o estudiar; es probable que a estas horas las personas también usen la bicicleta para ejercitarse. También, en la madrugada se observa la menor cantidad de bicicletas. A media mañana (alrededor de las 10:00 AM) encontramos un valle en los valores registrados.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7.2\n",
    "\n",
    "Run this plotting code, and make sure you understand the output. Then, separate this plot into two separate plots conditioned on \"workingday\". (In other words, one plot should display the hourly trend for \"workingday=0\", and the other should display the hourly trend for \"workingday=1\".)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ab13be9848>"
      ]
     },
     "execution_count": 337,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# mean rentals for each value of \"hour\"\n",
    "bikes.groupby('hour').total.mean().plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot for workingday == 0 and workingday == 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ab13a73bc8>"
      ]
     },
     "execution_count": 338,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# hourly rental trend for \"workingday=0\"\n",
    "bikes[bikes.workingday==0].groupby('hour').total.mean().plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ab13ad75c8>"
      ]
     },
     "execution_count": 339,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# hourly rental trend for \"workingday=1\"\n",
    "bikes[bikes.workingday==1].groupby('hour').total.mean().plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ab13b34548>"
      ]
     },
     "execution_count": 340,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# combine the two plots\n",
    "bikes.groupby(['hour', 'workingday']).total.mean().unstack().plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write about your findings"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En workingday = 1 se observa el comportamiento de ingreso y salida de personas a su trabajo y en workingday=0 se observa solo una tendencia a salir por ser fin de semana/holiday/etc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7.3\n",
    "\n",
    "Fit a linear regression model to the entire dataset, using \"total\" as the response and \"hour\" and \"workingday\" as the only features. Then, print the coefficients and interpret them. What are the limitations of linear regression in this instance?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients: \n",
      " [10.49206282  4.07248627]\n"
     ]
    }
   ],
   "source": [
    "# Create linear regression object\n",
    "regr = LinearRegression()\n",
    "\n",
    "Y = bikes[\"total\"]\n",
    "X = bikes[[\"hour\",\"workingday\"]]\n",
    "\n",
    "regr.fit(X, Y)\n",
    "print('Coefficients: \\n', regr.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Por cada unidad adicional de hora, el número total de bicicletas se incrementa en 10.49 unidades, dejando todo lo demás constante.\n",
    "Si el día no es holiday/weekend, el número total de bicicletas se incrementa en 4.07 unidades, dejando todo lo demás constante.\n",
    "Limitantes: no captura picos y valles (p.e. horas valle al final del día). No reconoce el comportamiento estacional/cíclico de la variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercice 7.4\n",
    "\n",
    "Create a Decision Tree to forecast \"total\" by manually iterating over the features \"hour\" and \"workingday\". The algorithm must at least have 6 end nodes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gini(y):\n",
    "    if y.shape[0] == 0:\n",
    "        return 0\n",
    "    else:\n",
    "        return 1 - (y.mean()**2 + (1 - y.mean())**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gini_impurity(X_col, y, split):\n",
    "    \"Calculate the gain of an split k on feature j\"\n",
    "    \n",
    "    filter_l = X_col < split\n",
    "    y_l = y.loc[filter_l]\n",
    "    y_r = y.loc[~filter_l]\n",
    "    \n",
    "    n_l = y_l.shape[0]\n",
    "    n_r = y_r.shape[0]\n",
    "    \n",
    "    gini_y = gini(y)\n",
    "    gini_l = gini(y_l)\n",
    "    gini_r = gini(y_r)\n",
    "    \n",
    "    gini_impurity_ = gini_y - (n_l / (n_l + n_r) * gini_l + n_r / (n_l + n_r) * gini_r)\n",
    "    \n",
    "    return gini_impurity_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "metadata": {},
   "outputs": [],
   "source": [
    "def best_split(X, y, num_pct=10):\n",
    "    \n",
    "    features = range(X.shape[1])\n",
    "    \n",
    "    best_split = [0, 0, 0]  # j, split, gain\n",
    "    \n",
    "    # For all features\n",
    "    for j in features:\n",
    "        \n",
    "        splits = np.percentile(X.iloc[:, j], np.arange(0, 100, 100.0 / (num_pct+1)).tolist())\n",
    "        splits = np.unique(splits)[1:]\n",
    "        \n",
    "        # For all splits\n",
    "        for split in splits:\n",
    "            gain = gini_impurity(X.iloc[:, j], y, split)\n",
    "                        \n",
    "            if gain > best_split[2]:\n",
    "                best_split = [j, split, gain]\n",
    "    \n",
    "    return best_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tree_grow(X, y, level=0, min_gain=0.001, max_depth=None, num_pct=10):\n",
    "    \n",
    "    # If only one observation\n",
    "    if X.shape[0] == 1:\n",
    "        tree = dict(y_pred=y.iloc[:1].values[0], y_prob=0.5, level=level, split=-1, n_samples=1, gain=0)\n",
    "        return tree\n",
    "    \n",
    "    # Calculate the best split\n",
    "    j, split, gain = best_split(X, y, num_pct)\n",
    "    \n",
    "    # save tree and estimate prediction\n",
    "    y_pred = int(y.mean() >= 0.5) \n",
    "    y_prob = (y.sum() + 1.0) / (y.shape[0] + 2.0)  # Laplace correction\n",
    "    \n",
    "    tree = dict(y_pred=y_pred, y_prob=y_prob, level=level, split=-1, n_samples=X.shape[0], gain=gain)\n",
    "    \n",
    "    # Check stooping criteria\n",
    "    if gain < min_gain:\n",
    "        return tree\n",
    "    if max_depth is not None:\n",
    "        if level >= max_depth:\n",
    "            return tree   \n",
    "    \n",
    "    # No stooping criteria was meet, then continue to create the partition\n",
    "    filter_l = X.iloc[:, j] < split\n",
    "    X_l, y_l = X.loc[filter_l], y.loc[filter_l]\n",
    "    X_r, y_r = X.loc[~filter_l], y.loc[~filter_l]\n",
    "    tree['split'] = [j, split]\n",
    "\n",
    "    # Next iteration to each split\n",
    "    \n",
    "    tree['sl'] = tree_grow(X_l, y_l, level + 1, min_gain=min_gain, max_depth=max_depth, num_pct=num_pct)\n",
    "    tree['sr'] = tree_grow(X_r, y_r, level + 1, min_gain=min_gain, max_depth=max_depth, num_pct=num_pct)\n",
    "    \n",
    "    return tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 346,
   "metadata": {},
   "outputs": [],
   "source": [
    "treebikes = tree_grow(X, Y, level=0, min_gain=0.001, max_depth=6, num_pct=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 347,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'y_pred': 1,\n",
       " 'y_prob': 191.53903379867745,\n",
       " 'level': 0,\n",
       " 'split': [0, 8.0],\n",
       " 'n_samples': 10886,\n",
       " 'gain': 18268.811823533004,\n",
       " 'sl': {'y_pred': 1,\n",
       "  'y_prob': 55.40711902113459,\n",
       "  'level': 1,\n",
       "  'split': [0, 7.0],\n",
       "  'n_samples': 3594,\n",
       "  'gain': 7207.700659959655,\n",
       "  'sl': {'y_pred': 1,\n",
       "   'y_prob': 32.561604584527224,\n",
       "   'level': 2,\n",
       "   'split': [0, 6.0],\n",
       "   'n_samples': 3139,\n",
       "   'gain': 646.8008927589567,\n",
       "   'sl': {'y_pred': 1,\n",
       "    'y_prob': 25.15934475055845,\n",
       "    'level': 3,\n",
       "    'split': [0, 2.0],\n",
       "    'n_samples': 2684,\n",
       "    'gain': 382.8088308604629,\n",
       "    'sl': {'y_pred': 1,\n",
       "     'y_prob': 44.41383095499451,\n",
       "     'level': 4,\n",
       "     'split': [1, 1.0],\n",
       "     'n_samples': 909,\n",
       "     'gain': 1402.5704281636313,\n",
       "     'sl': {'y_pred': 1,\n",
       "      'y_prob': 82.63356164383562,\n",
       "      'level': 5,\n",
       "      'split': [0, 1.0],\n",
       "      'n_samples': 290,\n",
       "      'gain': 254.91262782401645,\n",
       "      'sl': {'y_pred': 1,\n",
       "       'y_prob': 93.21088435374149,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 145,\n",
       "       'gain': 0},\n",
       "      'sr': {'y_pred': 1,\n",
       "       'y_prob': 70.93877551020408,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 145,\n",
       "       'gain': 0}},\n",
       "     'sr': {'y_pred': 1,\n",
       "      'y_prob': 26.30112721417069,\n",
       "      'level': 5,\n",
       "      'split': [0, 1.0],\n",
       "      'n_samples': 619,\n",
       "      'gain': 214.845612056841,\n",
       "      'sl': {'y_pred': 1,\n",
       "       'y_prob': 36.5,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 310,\n",
       "       'gain': 0},\n",
       "      'sr': {'y_pred': 1,\n",
       "       'y_prob': 15.903536977491962,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 309,\n",
       "       'gain': 0}}},\n",
       "    'sr': {'y_pred': 1,\n",
       "     'y_prob': 15.260551491277434,\n",
       "     'level': 4,\n",
       "     'split': [1, 1.0],\n",
       "     'n_samples': 1775,\n",
       "     'gain': 77.36245117563396,\n",
       "     'sl': {'y_pred': 1,\n",
       "      'y_prob': 24.19097222222222,\n",
       "      'level': 5,\n",
       "      'split': [0, 3.0],\n",
       "      'n_samples': 574,\n",
       "      'gain': 576.4856617753039,\n",
       "      'sl': {'y_pred': 1,\n",
       "       'y_prob': 53.01379310344828,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 143,\n",
       "       'gain': 0},\n",
       "      'sr': {'y_pred': 1,\n",
       "       'y_prob': 14.429561200923787,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 431,\n",
       "       'gain': 122.31785596345799}},\n",
       "     'sr': {'y_pred': 1,\n",
       "      'y_prob': 10.960099750623442,\n",
       "      'level': 5,\n",
       "      'split': [0, 5.0],\n",
       "      'n_samples': 1201,\n",
       "      'gain': 127.78785818751976,\n",
       "      'sl': {'y_pred': 1,\n",
       "       'y_prob': 6.249720044792833,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 891,\n",
       "       'gain': 4.9173062251339985},\n",
       "      'sr': {'y_pred': 1,\n",
       "       'y_prob': 24.375,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 310,\n",
       "       'gain': 0}}}},\n",
       "   'sr': {'y_pred': 1,\n",
       "    'y_prob': 75.92778993435448,\n",
       "    'level': 3,\n",
       "    'split': [1, 1.0],\n",
       "    'n_samples': 455,\n",
       "    'gain': 2961.6385176407275,\n",
       "    'sl': {'y_pred': 1,\n",
       "     'y_prob': 19.727891156462587,\n",
       "     'level': 4,\n",
       "     'split': -1,\n",
       "     'n_samples': 145,\n",
       "     'gain': 0},\n",
       "    'sr': {'y_pred': 1,\n",
       "     'y_prob': 101.92307692307692,\n",
       "     'level': 4,\n",
       "     'split': -1,\n",
       "     'n_samples': 310,\n",
       "     'gain': 0}}},\n",
       "  'sr': {'y_pred': 1,\n",
       "   'y_prob': 212.18599562363238,\n",
       "   'level': 2,\n",
       "   'split': [1, 1.0],\n",
       "   'n_samples': 455,\n",
       "   'gain': 25730.857340927716,\n",
       "   'sl': {'y_pred': 1,\n",
       "    'y_prob': 46.63265306122449,\n",
       "    'level': 3,\n",
       "    'split': -1,\n",
       "    'n_samples': 145,\n",
       "    'gain': 0},\n",
       "   'sr': {'y_pred': 1,\n",
       "    'y_prob': 288.83012820512823,\n",
       "    'level': 3,\n",
       "    'split': -1,\n",
       "    'n_samples': 310,\n",
       "    'gain': 0}}},\n",
       " 'sr': {'y_pred': 1,\n",
       "  'y_prob': 258.6007677543186,\n",
       "  'level': 1,\n",
       "  'split': [0, 21.0],\n",
       "  'n_samples': 7292,\n",
       "  'gain': 7392.920792160614,\n",
       "  'sl': {'y_pred': 1,\n",
       "   'y_prob': 287.7910901113736,\n",
       "   'level': 2,\n",
       "   'split': [0, 16.0],\n",
       "   'n_samples': 5924,\n",
       "   'gain': 5136.949194485263,\n",
       "   'sl': {'y_pred': 1,\n",
       "    'y_prob': 247.66428963247395,\n",
       "    'level': 3,\n",
       "    'split': [0, 9.0],\n",
       "    'n_samples': 3644,\n",
       "    'gain': 3771.8163517855573,\n",
       "    'sl': {'y_pred': 1,\n",
       "     'y_prob': 361.18380743982493,\n",
       "     'level': 4,\n",
       "     'split': [1, 1.0],\n",
       "     'n_samples': 455,\n",
       "     'gain': 58708.43579282705,\n",
       "     'sl': {'y_pred': 1,\n",
       "      'y_prob': 110.73469387755102,\n",
       "      'level': 5,\n",
       "      'split': -1,\n",
       "      'n_samples': 145,\n",
       "      'gain': 0},\n",
       "     'sr': {'y_pred': 1,\n",
       "      'y_prob': 476.87179487179486,\n",
       "      'level': 5,\n",
       "      'split': -1,\n",
       "      'n_samples': 310,\n",
       "      'gain': 0}},\n",
       "    'sr': {'y_pred': 1,\n",
       "     'y_prob': 231.25164525227203,\n",
       "     'level': 4,\n",
       "     'split': [1, 1.0],\n",
       "     'n_samples': 3189,\n",
       "     'gain': 8470.55836000036,\n",
       "     'sl': {'y_pred': 1,\n",
       "      'y_prob': 325.99901671583086,\n",
       "      'level': 5,\n",
       "      'split': [0, 11.0],\n",
       "      'n_samples': 1015,\n",
       "      'gain': 8950.6596576476,\n",
       "      'sl': {'y_pred': 1,\n",
       "       'y_prob': 219.35616438356163,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 290,\n",
       "       'gain': 3687.924114149835},\n",
       "      'sr': {'y_pred': 1,\n",
       "       'y_prob': 367.93672627235213,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 725,\n",
       "       'gain': 948.9170568371192}},\n",
       "     'sr': {'y_pred': 1,\n",
       "      'y_prob': 186.75735294117646,\n",
       "      'level': 5,\n",
       "      'split': [0, 10.0],\n",
       "      'n_samples': 2174,\n",
       "      'gain': 1019.5627656144788,\n",
       "      'sl': {'y_pred': 1,\n",
       "       'y_prob': 240.74358974358975,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 310,\n",
       "       'gain': 0},\n",
       "      'sr': {'y_pred': 1,\n",
       "       'y_prob': 177.53108252947482,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 1864,\n",
       "       'gain': 1047.2221981178882}}}},\n",
       "   'sr': {'y_pred': 1,\n",
       "    'y_prob': 351.6507449605609,\n",
       "    'level': 3,\n",
       "    'split': [0, 19.0],\n",
       "    'n_samples': 2280,\n",
       "    'gain': 8546.297317700344,\n",
       "    'sl': {'y_pred': 1,\n",
       "     'y_prob': 404.7416058394161,\n",
       "     'level': 4,\n",
       "     'split': [0, 17.0],\n",
       "     'n_samples': 1368,\n",
       "     'gain': 7913.84518366761,\n",
       "     'sl': {'y_pred': 1,\n",
       "      'y_prob': 314.99344978165936,\n",
       "      'level': 5,\n",
       "      'split': [1, 1.0],\n",
       "      'n_samples': 456,\n",
       "      'gain': 2451.6410756125697,\n",
       "      'sl': {'y_pred': 1,\n",
       "       'y_prob': 362.6530612244898,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 145,\n",
       "       'gain': 0},\n",
       "      'sr': {'y_pred': 1,\n",
       "       'y_prob': 290.6006389776358,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 311,\n",
       "       'gain': 0}},\n",
       "     'sr': {'y_pred': 1,\n",
       "      'y_prob': 448.8293216630197,\n",
       "      'level': 5,\n",
       "      'split': [1, 1.0],\n",
       "      'n_samples': 912,\n",
       "      'gain': 16775.112943681423,\n",
       "      'sl': {'y_pred': 1,\n",
       "       'y_prob': 313.527397260274,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 290,\n",
       "       'gain': 1098.6732223543804},\n",
       "      'sr': {'y_pred': 1,\n",
       "       'y_prob': 510.7067307692308,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 622,\n",
       "       'gain': 568.6363044219324}}},\n",
       "    'sr': {'y_pred': 1,\n",
       "     'y_prob': 271.30415754923416,\n",
       "     'level': 4,\n",
       "     'split': [0, 20.0],\n",
       "     'n_samples': 912,\n",
       "     'gain': 3763.732516254968,\n",
       "     'sl': {'y_pred': 1,\n",
       "      'y_prob': 313.90393013100436,\n",
       "      'level': 5,\n",
       "      'split': [1, 1.0],\n",
       "      'n_samples': 456,\n",
       "      'gain': 4960.139346872049,\n",
       "      'sl': {'y_pred': 1,\n",
       "       'y_prob': 239.05442176870747,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 145,\n",
       "       'gain': 0},\n",
       "      'sr': {'y_pred': 1,\n",
       "       'y_prob': 347.0543130990415,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 311,\n",
       "       'gain': 0}},\n",
       "     'sr': {'y_pred': 1,\n",
       "      'y_prob': 227.52183406113537,\n",
       "      'level': 5,\n",
       "      'split': [1, 1.0],\n",
       "      'n_samples': 456,\n",
       "      'gain': 1864.0584404538968,\n",
       "      'sl': {'y_pred': 1,\n",
       "       'y_prob': 181.31292517006804,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 145,\n",
       "       'gain': 0},\n",
       "      'sr': {'y_pred': 1,\n",
       "       'y_prob': 247.77316293929712,\n",
       "       'level': 6,\n",
       "       'split': -1,\n",
       "       'n_samples': 311,\n",
       "       'gain': 0}}}}},\n",
       "  'sr': {'y_pred': 1,\n",
       "   'y_prob': 131.95985401459853,\n",
       "   'level': 2,\n",
       "   'split': [0, 23.0],\n",
       "   'n_samples': 1368,\n",
       "   'gain': 1818.4488902568337,\n",
       "   'sl': {'y_pred': 1,\n",
       "    'y_prob': 153.13894967177242,\n",
       "    'level': 3,\n",
       "    'split': [0, 22.0],\n",
       "    'n_samples': 912,\n",
       "    'gain': 791.775632887031,\n",
       "    'sl': {'y_pred': 1,\n",
       "     'y_prob': 172.61572052401746,\n",
       "     'level': 4,\n",
       "     'split': [1, 1.0],\n",
       "     'n_samples': 456,\n",
       "     'gain': 565.7975267665752,\n",
       "     'sl': {'y_pred': 1,\n",
       "      'y_prob': 146.72108843537416,\n",
       "      'level': 5,\n",
       "      'split': -1,\n",
       "      'n_samples': 145,\n",
       "      'gain': 0},\n",
       "     'sr': {'y_pred': 1,\n",
       "      'y_prob': 183.67731629392972,\n",
       "      'level': 5,\n",
       "      'split': -1,\n",
       "      'n_samples': 311,\n",
       "      'gain': 0}},\n",
       "    'sr': {'y_pred': 1,\n",
       "     'y_prob': 132.99563318777294,\n",
       "     'level': 4,\n",
       "     'split': [1, 1.0],\n",
       "     'n_samples': 456,\n",
       "     'gain': 97.49151329977758,\n",
       "     'sl': {'y_pred': 1,\n",
       "      'y_prob': 121.68027210884354,\n",
       "      'level': 5,\n",
       "      'split': -1,\n",
       "      'n_samples': 145,\n",
       "      'gain': 0},\n",
       "     'sr': {'y_pred': 1,\n",
       "      'y_prob': 137.4632587859425,\n",
       "      'level': 5,\n",
       "      'split': -1,\n",
       "      'n_samples': 311,\n",
       "      'gain': 0}}},\n",
       "   'sr': {'y_pred': 1,\n",
       "    'y_prob': 89.12008733624454,\n",
       "    'level': 3,\n",
       "    'split': [1, 1.0],\n",
       "    'n_samples': 456,\n",
       "    'gain': 1.1244518608182261,\n",
       "    'sl': {'y_pred': 1,\n",
       "     'y_prob': 89.38095238095238,\n",
       "     'level': 4,\n",
       "     'split': -1,\n",
       "     'n_samples': 145,\n",
       "     'gain': 0},\n",
       "    'sr': {'y_pred': 1,\n",
       "     'y_prob': 88.43130990415335,\n",
       "     'level': 4,\n",
       "     'split': -1,\n",
       "     'n_samples': 311,\n",
       "     'gain': 0}}}}}"
      ]
     },
     "execution_count": 347,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "treebikes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 348,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tree_predict(X, tree, proba=False):\n",
    "    \n",
    "    predicted = np.ones(X.shape[0])\n",
    "\n",
    "    # Check if final node\n",
    "    if tree['split'] == -1:\n",
    "        if not proba:\n",
    "            predicted = predicted * tree['y_pred']\n",
    "        else:\n",
    "            predicted = predicted * tree['y_prob']\n",
    "            \n",
    "    else:\n",
    "        \n",
    "        j, split = tree['split']\n",
    "        filter_l = (X.iloc[:, j] < split)\n",
    "        X_l = X.loc[filter_l]\n",
    "        X_r = X.loc[~filter_l]\n",
    "\n",
    "        if X_l.shape[0] == 0:  # If left node is empty only continue with right\n",
    "            predicted[~filter_l] = tree_predict(X_r, tree['sr'], proba)\n",
    "        elif X_r.shape[0] == 0:  # If right node is empty only continue with left\n",
    "            predicted[filter_l] = tree_predict(X_l, tree['sl'], proba)\n",
    "        else:\n",
    "            predicted[filter_l] = tree_predict(X_l, tree['sl'], proba)\n",
    "            predicted[~filter_l] = tree_predict(X_r, tree['sr'], proba)\n",
    "\n",
    "    return predicted  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pte concluir Accuracy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7.5\n",
    "\n",
    "Train a Decision Tree using scikit-learn. Comment about the performance of the models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# list of values to try for max_depth\n",
    "max_depth_range = range(1, 21)\n",
    "\n",
    "# list to store the average RMSE for each value of max_depth\n",
    "accuracy_scores = []\n",
    "\n",
    "# use 10-fold cross-validation with each value of max_depth\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "for depth in max_depth_range:\n",
    "    clf = DecisionTreeClassifier(max_depth=depth, random_state=1)\n",
    "    accuracy_scores.append(cross_val_score(clf, X, Y, cv=10, scoring='accuracy').mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Accuracy')"
      ]
     },
     "execution_count": 350,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot max_depth (x-axis) versus RMSE (y-axis)\n",
    "plt.plot(max_depth_range, accuracy_scores)\n",
    "plt.xlabel('max_depth')\n",
    "plt.ylabel('Accuracy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.01901543847566575, 11)"
      ]
     },
     "execution_count": 351,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show the best accuracy and the corresponding max_depth\n",
    "sorted(zip(accuracy_scores, max_depth_range))[::-1][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 352,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(max_depth=11, random_state=1)"
      ]
     },
     "execution_count": 352,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# max_depth=11 was best, so fit a tree using that parameter\n",
    "clf = DecisionTreeClassifier(max_depth=11, random_state=1)\n",
    "clf.fit(X, Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 2 - Bagging"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Mashable news stories analysis\n",
    "\n",
    "Predicting if a news story is going to be popular"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>url</th>\n",
       "      <th>timedelta</th>\n",
       "      <th>n_tokens_title</th>\n",
       "      <th>n_tokens_content</th>\n",
       "      <th>n_unique_tokens</th>\n",
       "      <th>n_non_stop_words</th>\n",
       "      <th>n_non_stop_unique_tokens</th>\n",
       "      <th>num_hrefs</th>\n",
       "      <th>num_self_hrefs</th>\n",
       "      <th>num_imgs</th>\n",
       "      <th>...</th>\n",
       "      <th>min_positive_polarity</th>\n",
       "      <th>max_positive_polarity</th>\n",
       "      <th>avg_negative_polarity</th>\n",
       "      <th>min_negative_polarity</th>\n",
       "      <th>max_negative_polarity</th>\n",
       "      <th>title_subjectivity</th>\n",
       "      <th>title_sentiment_polarity</th>\n",
       "      <th>abs_title_subjectivity</th>\n",
       "      <th>abs_title_sentiment_polarity</th>\n",
       "      <th>Popular</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>http://mashable.com/2014/12/10/cia-torture-rep...</td>\n",
       "      <td>28.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>0.732620</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.844262</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.80</td>\n",
       "      <td>-0.487500</td>\n",
       "      <td>-0.60</td>\n",
       "      <td>-0.250000</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>http://mashable.com/2013/10/18/bitlock-kicksta...</td>\n",
       "      <td>447.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>297.0</td>\n",
       "      <td>0.653199</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.815789</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.160000</td>\n",
       "      <td>0.50</td>\n",
       "      <td>-0.135340</td>\n",
       "      <td>-0.40</td>\n",
       "      <td>-0.050000</td>\n",
       "      <td>0.1</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>http://mashable.com/2013/07/24/google-glass-po...</td>\n",
       "      <td>533.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.660377</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.775701</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.136364</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>http://mashable.com/2013/11/21/these-are-the-m...</td>\n",
       "      <td>413.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>781.0</td>\n",
       "      <td>0.497409</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.677350</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.195701</td>\n",
       "      <td>-0.40</td>\n",
       "      <td>-0.071429</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>http://mashable.com/2014/02/11/parking-ticket-...</td>\n",
       "      <td>331.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>0.685714</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.830357</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.55</td>\n",
       "      <td>-0.175000</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>-0.100000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 url  timedelta  \\\n",
       "0  http://mashable.com/2014/12/10/cia-torture-rep...       28.0   \n",
       "1  http://mashable.com/2013/10/18/bitlock-kicksta...      447.0   \n",
       "2  http://mashable.com/2013/07/24/google-glass-po...      533.0   \n",
       "3  http://mashable.com/2013/11/21/these-are-the-m...      413.0   \n",
       "4  http://mashable.com/2014/02/11/parking-ticket-...      331.0   \n",
       "\n",
       "   n_tokens_title  n_tokens_content  n_unique_tokens  n_non_stop_words  \\\n",
       "0             9.0             188.0         0.732620               1.0   \n",
       "1             7.0             297.0         0.653199               1.0   \n",
       "2            11.0             181.0         0.660377               1.0   \n",
       "3            12.0             781.0         0.497409               1.0   \n",
       "4             8.0             177.0         0.685714               1.0   \n",
       "\n",
       "   n_non_stop_unique_tokens  num_hrefs  num_self_hrefs  num_imgs  ...  \\\n",
       "0                  0.844262        5.0             1.0       1.0  ...   \n",
       "1                  0.815789        9.0             4.0       1.0  ...   \n",
       "2                  0.775701        4.0             3.0       1.0  ...   \n",
       "3                  0.677350       10.0             3.0       1.0  ...   \n",
       "4                  0.830357        3.0             2.0       1.0  ...   \n",
       "\n",
       "   min_positive_polarity  max_positive_polarity  avg_negative_polarity  \\\n",
       "0               0.200000                   0.80              -0.487500   \n",
       "1               0.160000                   0.50              -0.135340   \n",
       "2               0.136364                   1.00               0.000000   \n",
       "3               0.100000                   1.00              -0.195701   \n",
       "4               0.100000                   0.55              -0.175000   \n",
       "\n",
       "   min_negative_polarity  max_negative_polarity  title_subjectivity  \\\n",
       "0                  -0.60              -0.250000                 0.9   \n",
       "1                  -0.40              -0.050000                 0.1   \n",
       "2                   0.00               0.000000                 0.3   \n",
       "3                  -0.40              -0.071429                 0.0   \n",
       "4                  -0.25              -0.100000                 0.0   \n",
       "\n",
       "   title_sentiment_polarity  abs_title_subjectivity  \\\n",
       "0                       0.8                     0.4   \n",
       "1                      -0.1                     0.4   \n",
       "2                       1.0                     0.2   \n",
       "3                       0.0                     0.5   \n",
       "4                       0.0                     0.5   \n",
       "\n",
       "   abs_title_sentiment_polarity  Popular  \n",
       "0                           0.8        1  \n",
       "1                           0.1        0  \n",
       "2                           1.0        0  \n",
       "3                           0.0        0  \n",
       "4                           0.0        0  \n",
       "\n",
       "[5 rows x 61 columns]"
      ]
     },
     "execution_count": 417,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('../datasets/mashable.csv', index_col=0)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 418,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6000, 61)"
      ]
     },
     "execution_count": 418,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 419,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop(['url', 'Popular'], axis=1)\n",
    "y = df['Popular']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 420,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 420,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train/test split\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7.6\n",
    "\n",
    "Estimate a Decision Tree Classifier and a Logistic Regression\n",
    "\n",
    "Evaluate using the following metrics:\n",
    "* Accuracy\n",
    "* F1-Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6134228187919464 0.616\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Regression object\n",
    "regr = LogisticRegression()\n",
    "X = df.drop(['url', 'Popular'], axis=1)\n",
    "y = df['Popular']\n",
    "\n",
    "regr.fit(X, y)\n",
    "y_pred = regr.predict(X_test)\n",
    "print(metrics.f1_score(y_pred, y_test), metrics.accuracy_score(y_pred, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6448598130841121 0.6453333333333333\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "# Decision Tree\n",
    "tree = DecisionTreeClassifier(max_depth=2)\n",
    "X = df.drop(['url', 'Popular'], axis=1)\n",
    "y = df['Popular']\n",
    "tree.fit(X, y)\n",
    "y_pred = tree.predict(X_test)\n",
    "print(metrics.f1_score(y_pred, y_test), metrics.accuracy_score(y_pred, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7.7\n",
    "\n",
    "Estimate 300 bagged samples\n",
    "\n",
    "Estimate the following set of classifiers:\n",
    "\n",
    "* 100 Decision Trees where max_depth=None\n",
    "* 100 Decision Trees where max_depth=2\n",
    "* 100 Logistic Regressions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_estimators = 300\n",
    "# set a seed for reproducibility\n",
    "np.random.seed(123)\n",
    "\n",
    "n_samples = X_train.shape[0]\n",
    "\n",
    "samples = [np.random.choice(a=n_samples, size=n_samples, replace=True) for _ in range(n_estimators)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "#100 DecisionTreeClassifier \n",
    "np.random.seed(123) \n",
    "seeds = np.random.randint(1, 10000, size=n_estimators)\n",
    "n_estimators_2=100\n",
    "trees = {}\n",
    "for i in range(n_estimators):\n",
    "    if n_estimators < n_estimators_2:\n",
    "        trees[i] = DecisionTreeClassifier(max_features=\"sqrt\", max_depth=None, random_state=seeds[i])\n",
    "        trees[i].fit(X_train.iloc[samples[i]], y_train.iloc[samples[i]])\n",
    "    if n_estimators >=200:\n",
    "        trees[i] = LogisticRegression()\n",
    "        trees[i].fit(X_train.iloc[samples[i]], y_train.iloc[samples[i]])\n",
    "    else:\n",
    "        trees[i] = DecisionTreeClassifier(max_features=\"sqrt\", max_depth=2, random_state=seeds[i])\n",
    "        trees[i].fit(X_train.iloc[samples[i]], y_train.iloc[samples[i]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1483</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2185</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2520</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3721</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3727</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 300 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      0    1    2    3    4    5    6    7    8    9    ...  290  291  292  \\\n",
       "1483    1    1    1    1    1    1    1    1    1    1  ...    1    1    1   \n",
       "2185    0    1    1    0    0    1    0    0    1    1  ...    0    0    1   \n",
       "2520    1    1    1    1    1    1    1    1    1    1  ...    1    1    1   \n",
       "3721    1    1    1    1    1    1    1    1    1    1  ...    1    1    1   \n",
       "3727    0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
       "\n",
       "      293  294  295  296  297  298  299  \n",
       "1483    1    1    1    1    1    1    1  \n",
       "2185    0    1    1    0    0    0    0  \n",
       "2520    1    1    1    1    1    1    1  \n",
       "3721    1    1    1    1    1    1    1  \n",
       "3727    0    0    0    0    0    0    0  \n",
       "\n",
       "[5 rows x 300 columns]"
      ]
     },
     "execution_count": 426,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_df = pd.DataFrame(index=X_test.index, columns=list(range(n_estimators)))\n",
    "for i in range(n_estimators):\n",
    "    y_pred_df.iloc[:, i] = trees[i].predict(X_test)\n",
    "y_pred_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7.8\n",
    "\n",
    "Ensemble using majority voting\n",
    "\n",
    "Evaluate using the following metrics:\n",
    "* Accuracy\n",
    "* F1-Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 456,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.614765100671141 0.6173333333333333\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "print(metrics.f1_score(y_pred, y_test), metrics.accuracy_score(y_pred, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7.9\n",
    "\n",
    "Estimate te probability as %models that predict positive\n",
    "\n",
    "Modify the probability threshold and select the one that maximizes the F1-Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 431,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3000</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3000</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   count  percentage\n",
       "1   3000         0.5\n",
       "0   3000         0.5"
      ]
     },
     "execution_count": 431,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.value_counts().to_frame('count').assign(percentage = lambda x: x/x.sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1483</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2185</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2520</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3721</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3727</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 300 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      0    1    2    3    4    5    6    7    8    9    ...  290  291  292  \\\n",
       "1483    1    1    1    1    1    1    1    1    1    1  ...    1    1    1   \n",
       "2185    0    1    1    0    0    1    0    0    1    1  ...    0    0    1   \n",
       "2520    1    1    1    1    1    1    1    1    1    1  ...    1    1    1   \n",
       "3721    1    1    1    1    1    1    1    1    1    1  ...    1    1    1   \n",
       "3727    0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
       "\n",
       "      293  294  295  296  297  298  299  \n",
       "1483    1    1    1    1    1    1    1  \n",
       "2185    0    1    1    0    0    0    0  \n",
       "2520    1    1    1    1    1    1    1  \n",
       "3721    1    1    1    1    1    1    1  \n",
       "3727    0    0    0    0    0    0    0  \n",
       "\n",
       "[5 rows x 300 columns]"
      ]
     },
     "execution_count": 438,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_df = pd.DataFrame(index=X_test.index, columns=list(range(n_estimators)))\n",
    "for i in range(n_estimators):\n",
    "    y_pred_df.iloc[:, i] = trees[i].predict(X_test)\n",
    "y_pred_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1483    300\n",
       "2185    167\n",
       "2520    300\n",
       "3721    299\n",
       "3727      8\n",
       "4524    298\n",
       "234       0\n",
       "4735      0\n",
       "5839    167\n",
       "2939    300\n",
       "dtype: int64"
      ]
     },
     "execution_count": 439,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_df.sum(axis=1)[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6152805949966192 0.6206666666666667\n"
     ]
    }
   ],
   "source": [
    "y_pred = (y_pred_df.sum(axis=1) >= (n_estimators / 2)).astype(np.int)\n",
    "from sklearn import metrics\n",
    "print(metrics.f1_score(y_pred, y_test), metrics.accuracy_score(y_pred, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7.10\n",
    "\n",
    "Ensemble using weighted voting using the oob_error\n",
    "\n",
    "Evaluate using the following metrics:\n",
    "* Accuracy\n",
    "* F1-Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "metadata": {},
   "outputs": [],
   "source": [
    "samples_oob = []\n",
    "# show the \"out-of-bag\" observations for each sample\n",
    "for sample in samples:\n",
    "    samples_oob.append(sorted(set(range(n_samples)) - set(sample)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "metadata": {},
   "outputs": [],
   "source": [
    "errors = np.zeros(n_estimators)\n",
    "\n",
    "for i in range(n_estimators):\n",
    "    y_pred_ = trees[i].predict(X_train.iloc[samples_oob[i]])\n",
    "    errors[i] = 1 - metrics.accuracy_score(y_train.iloc[samples_oob[i]], y_pred_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1225    1\n",
       "2928    0\n",
       "5291    0\n",
       "480     1\n",
       "157     0\n",
       "       ..\n",
       "5374    0\n",
       "3462    1\n",
       "2763    0\n",
       "5192    0\n",
       "3980    1\n",
       "Name: Popular, Length: 1625, dtype: int64"
      ]
     },
     "execution_count": 444,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.iloc[samples_oob[1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'OOB error of each tree')"
      ]
     },
     "execution_count": 445,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('fivethirtyeight')\n",
    "\n",
    "plt.scatter(range(n_estimators), errors)\n",
    "plt.xlim([0, n_estimators])\n",
    "plt.title('OOB error of each tree')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha = (1 - errors) / (1 - errors).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.6152805949966192, 0.6206666666666667)"
      ]
     },
     "execution_count": 447,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weighted_sum_1 = ((y_pred_df) * alpha).sum(axis=1)\n",
    "\n",
    "y_pred = (weighted_sum_1 >= 0.5).astype(np.int)\n",
    "\n",
    "metrics.f1_score(y_pred, y_test), metrics.accuracy_score(y_pred, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7.11\n",
    "\n",
    "Estimate te probability of the weighted voting\n",
    "\n",
    "Modify the probability threshold and select the one that maximizes the F1-Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.6495049504950494, 0.646)"
      ]
     },
     "execution_count": 448,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import BaggingClassifier\n",
    "clf = BaggingClassifier(base_estimator=DecisionTreeClassifier(), n_estimators=300, bootstrap=True,\n",
    "                        random_state=42, n_jobs=-1, oob_score=True)\n",
    "clf.fit(X_train, y_train)\n",
    "y_pred = clf.predict(X_test)\n",
    "metrics.f1_score(y_pred, y_test), metrics.accuracy_score(y_pred, y_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "metadata": {},
   "outputs": [],
   "source": [
    "errors = np.zeros(clf.n_estimators)\n",
    "y_pred_all_ = np.zeros((X_test.shape[0], clf.n_estimators))\n",
    "\n",
    "for i in range(clf.n_estimators):\n",
    "    oob_sample = ~clf.estimators_samples_[i]\n",
    "    y_pred_ = clf.estimators_[i].predict(X_train.values[oob_sample])\n",
    "    errors[i] = metrics.accuracy_score(y_pred_, y_train.values[oob_sample])\n",
    "    y_pred_all_[:, i] = clf.estimators_[i].predict(X_test)\n",
    "    \n",
    "alpha = (1 - errors) / (1 - errors).sum()\n",
    "y_pred = (np.sum(y_pred_all_ * alpha, axis=1) >= 0.5).astype(np.int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.6504279131007242, 0.646)"
      ]
     },
     "execution_count": 450,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.f1_score(y_pred, y_test), metrics.accuracy_score(y_pred, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 7.12\n",
    "\n",
    "Estimate a logistic regression using as input the estimated classifiers\n",
    "\n",
    "Modify the probability threshold such that maximizes the F1-Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 451,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_2 = pd.DataFrame(index=X_train.index, columns=list(range(n_estimators)))\n",
    "\n",
    "for i in range(n_estimators):\n",
    "    X_train_2[i] = trees[i].predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegressionCV(cv=5)"
      ]
     },
     "execution_count": 452,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegressionCV\n",
    "lr = LogisticRegressionCV(cv = 5 )\n",
    "lr.fit(X_train_2, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = lr.predict(y_pred_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.614765100671141, 0.6173333333333333)"
      ]
     },
     "execution_count": 454,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.f1_score(y_pred, y_test), metrics.accuracy_score(y_pred, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
